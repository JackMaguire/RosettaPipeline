#include <widgets/LoadWidget.hh>

#include <serialization.hh>

#include <graph/Graph.hh>
#include <widgets/GraphWidget.hh>
#include <widgets/OptionsWidget.hh>
#include <widgets/PublicationBrowserDialog.hh>

//#include <Wt/WLength.h>
#include <Wt/WGlobal.h>
#include <Wt/WPushButton.h>
#include <Wt/WText.h>
#include <Wt/WFileUpload.h>
#include <Wt/WBreak.h>

#include <fstream>
#include <iostream>
#include <memory>
#include <vector>

namespace widgets {

LoadWidget::LoadWidget(
  RightViewWidget * parent,
  graph::GraphSP graph,
  OptionsSP options,
  RefreshableElementVecSP refreshers
) :
  WContainerWidget(),
  OptionsHolder( std::move( options ) ),
  parent_( parent ),
  graph_( std::move( graph ) ),
  refreshers_( std::move( refreshers ) )
{
  //largely copied from https://github.com/emweb/wt/blob/29ae91638e197013f67e7c826317529615d10749/examples/widgetgallery/examples/FileUpload.cpp

  addWidget( Wt::cpp14::make_unique< Wt::WText >(
      "Use the \"Choose File\" and \"Load\" buttons to upload a workflow file "
      "(generated by using the \"Save\" button above) from your computer. "
      "You may alternatively use the \"Browse Published Workflows\" button "
      "to load workflows that other users have published." ) );
  addWidget( Wt::cpp14::make_unique< Wt::WBreak >() );

  //todo look into WFileDropWidget
  Wt::WFileUpload * fu = addWidget( Wt::cpp14::make_unique< Wt::WFileUpload >() );
  fu->setFileTextSize( 1000 );//Set the maximum file size to 1000 kB.

  addWidget( Wt::cpp14::make_unique< Wt::WBreak >() );

  Wt::WPushButton * upload_button = addWidget( Wt::cpp14::make_unique< Wt::WPushButton >( "Load" ) );
  Wt::WText * upload_out = addWidget( Wt::cpp14::make_unique< Wt::WText >() );
  addWidget( Wt::cpp14::make_unique< Wt::WBreak >() );

  Wt::WPushButton * browse_published_button =
    addWidget( Wt::cpp14::make_unique< Wt::WPushButton >( "Browse Published Workflows" ) );

  upload_button->clicked().connect(
    [=] {
      fu->upload();
      upload_button->disable();
      upload_out->setText( "File upload has begun." );
    }
  );

  fu->uploaded().connect(
    [=] {
      upload_button->enable();

      auto const filename = fu->spoolFileName();
      if( filename.size() > 1 ){
	upload_out->setText( serialization::load_file( filename, * graph, * options_ ) );
	refreshers_->refresh_all_objects();
      }
    }
  );

  fu->fileTooLarge().connect(
    [=] {
      upload_button->enable();
      upload_out->setText( "File is too large. Current limit is 1 MB." );
    }
  );

  browse_published_button->clicked().connect(
    [=] {
      this->loadBrowseWidget();
    }
  );

}

LoadWidget::~LoadWidget(){}

void
LoadWidget::loadBrowseWidget(){
  PublicationBrowserDialog * const container = addChild(
    Wt::cpp14::make_unique< PublicationBrowserDialog >(
      this,
      graph_,
      options_,
      refreshers_
    )
  );
  container->show();
}

}//namespace widgets
